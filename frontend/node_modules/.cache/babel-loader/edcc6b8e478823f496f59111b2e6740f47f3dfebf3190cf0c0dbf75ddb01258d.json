{"ast":null,"code":"var _jsxFileName = \"H:\\\\Milestone\\\\ToDoList\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State for storing todos and task input value\n  const [todos, setTodos] = useState([]);\n  const [task, setTask] = useState('');\n\n  // Fetch todos from the backend when the component mounts\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/todos').then(response => setTodos(response.data)) // Set todos state with fetched data\n    .catch(err => console.error('Error fetching todos:', err));\n  }, []); // Empty dependency array means it runs only once when the component mounts\n\n  // Add a new todo to the backend and update state\n  const addTodo = () => {\n    if (task.trim() === '') return; // Don't add empty tasks\n    axios.post('http://localhost:5000/api/todos', {\n      task\n    }).then(response => {\n      setTodos([...todos, response.data]); // Add the new todo to the todos list\n      setTask(''); // Clear the input field after adding\n    }).catch(err => console.error('Error adding todo:', err));\n  };\n\n  // Delete a todo from the backend and update state\n  const deleteTodo = id => {\n    axios.delete(`http://localhost:5000/api/todos/${id}`).then(() => {\n      setTodos(todos.filter(todo => todo._id !== id)); // Remove deleted todo from the list\n    }).catch(err => console.error('Error deleting todo:', err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simple To-Do App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: task,\n      onChange: e => setTask(e.target.value) // Update task state on input change\n      ,\n      placeholder: \"Add a task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTodo,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [todo.task, \"  \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTodo(todo._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), \"  \"]\n      }, todo._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OIbOJX6l5BKlzUFLadgY/4hLkco=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","todos","setTodos","task","setTask","get","then","response","data","catch","err","console","error","addTodo","trim","post","deleteTodo","id","delete","filter","todo","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","_c","$RefreshReg$"],"sources":["H:/Milestone/ToDoList/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  // State for storing todos and task input value\n  const [todos, setTodos] = useState([]);\n  const [task, setTask] = useState('');\n\n  // Fetch todos from the backend when the component mounts\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/todos')\n      .then(response => setTodos(response.data))  // Set todos state with fetched data\n      .catch(err => console.error('Error fetching todos:', err));\n  }, []);  // Empty dependency array means it runs only once when the component mounts\n\n  // Add a new todo to the backend and update state\n  const addTodo = () => {\n    if (task.trim() === '') return; // Don't add empty tasks\n    axios.post('http://localhost:5000/api/todos', { task })\n      .then(response => {\n        setTodos([...todos, response.data]);  // Add the new todo to the todos list\n        setTask('');  // Clear the input field after adding\n      })\n      .catch(err => console.error('Error adding todo:', err));\n  };\n\n  // Delete a todo from the backend and update state\n  const deleteTodo = (id) => {\n    axios.delete(`http://localhost:5000/api/todos/${id}`)\n      .then(() => {\n        setTodos(todos.filter(todo => todo._id !== id));  // Remove deleted todo from the list\n      })\n      .catch(err => console.error('Error deleting todo:', err));\n  };\n\n  return (\n    <div>\n      <h1>Simple To-Do App</h1>\n      \n      {/* Input field to add a task */}\n      <input\n        type=\"text\"\n        value={task}\n        onChange={(e) => setTask(e.target.value)}  // Update task state on input change\n        placeholder=\"Add a task\"\n      />\n      <button onClick={addTodo}>Add</button>\n      \n      {/* Display the list of todos */}\n      <ul>\n        {todos.map(todo => (\n          <li key={todo._id}>\n            {todo.task}  {/* Display task */}\n            <button onClick={() => deleteTodo(todo._id)}>Delete</button>  {/* Delete task button */}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}